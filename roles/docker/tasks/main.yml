---
# Workaround for https://github.com/CiscoCloud/microservices-infrastructure/issues/161
- name: install latest device-mapper-libs
  become: yes
  yum:
    name: device-mapper-libs
    state: latest
  tags:
    - docker
    - bootstrap

- name: install docker packages
  become: yes
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - docker
    - docker-selinux
  tags:
    - docker
    - bootstrap

- name: check if docker storage already set up with devicemapper
  become: yes
  shell: "[ -f /etc/sysconfig/docker-storage-setup ] && . /etc/sysconfig/docker-storage-setup && echo ${STORAGE_DRIVER:-NOT_SET}"
  register: docker_already_set_up_with_devicemapper
  tags:
    - docker
    - bootstrap

- name: setup docker storage
  become: yes
  lineinfile:
    dest: /etc/sysconfig/docker-storage-setup
    regexp: "^{{ item.var }}=.*"
    line: "{{ item.var }}={{ item.value }}"
    state: present
    create: yes
  with_items:
    - var: STORAGE_DRIVER
      value: "{{ docker_storage_driver }}"
    - var: DATA_SIZE
      value: "{{ docker_lvm_data_volume_size }}"
    - var: VG
      value: "{{ volume_group_name }}"
    - var: MIN_DATA_SIZE
      value: "{{ docker_lvm_data_volume_size_min }}"
    - var: AUTO_EXTEND_POOL
      value: "{{ docker_lvm_auto_extend_pool }}"
  when: docker_already_set_up_with_devicemapper.stdout == "NOT_SET"
  tags:
    - docker

- include: lvm.yml
  when: docker_lvm_backed_devicemapper
  tags:
    - docker
    - bootstrap

- name: create rsyslog.d
  become: yes
  file:
    dest: /etc/rsyslog.d
    state: directory
  tags:
    - docker
    - bootstrap

- name: create docker entry for syslogd
  become: yes
  copy:
    dest: /etc/rsyslog.d/10-docker.conf
    content: |
      # Docker logging
      :syslogtag, isequal, "docker:"  /var/log/docker/docker.log
      & ~
  notify:
    - restart rsyslog
  tags:
    - docker
    - bootstrap

- name: configure docker consul dns
  become: yes
  lineinfile:
    dest: /etc/sysconfig/docker
    regexp: ^OPTIONS=
    line: OPTIONS='{% if docker_selinux_enabled %}--selinux-enabled {% endif %}--dns {{ private_ipv4 }} --dns-search service.{{ consul_dns_domain }} {% if kube_build is defined %}--dns-search {{ cluster_name }}{% endif %} --log-driver=syslog'
    state: present
    create: yes
  notify:
    - restart docker
  tags:
    - docker

- name: ensure docker config dir exists
  become: yes
  file:
    path: /root/.docker
    state: directory
  tags:
    - docker
    - bootstrap

- name: setup private docker registry credentials
  become: yes
  when: do_private_docker_registry
  template:
    src: config.json.j2
    dest: /root/.docker/config.json
  tags:
    - docker
  register: docker_registry_credentials

- name: add docker registry credentials to /etc/
  become: yes
  when: do_private_docker_registry and docker_registry_credentials.changed
  command: tar cvzf /etc/docker.tar.gz .docker
  args:
    chdir: /root
  tags:
    - docker

- name: enable docker
  become: yes
  failed_when: no
  service:
    name: docker
    enabled: yes
    state: started
  tags:
    - docker
    - bootstrap # needed to install Docker images during bootstrap

############################################# DEBUGGING
- name: debug
  register: dkr2
  become: yes
  command: journalctl -u docker --no-pager -l
  tags:
    - bootstrap

- debug: msg='{{ dkr2.stdout }}'
  tags:
    - bootstrap

- name: debug
  register: dkr3
  become: yes
  command: cat /etc/redhat-release
  tags:
    - bootstrap
- debug: msg='{{ dkr3.stdout }}'
  tags:
    - bootstrap

- name: debug
  register: dkr4
  become: yes
  command: docker daemon
  tags:
    - bootstrap
- debug: msg='{{ dkr4.stdout }}'
  tags:
    - bootstrap

- name: debug
  register: dkr
  become: yes
  command: docker info
  tags:
    - bootstrap
- debug: msg='{{ dkr.stdout }}'
  tags:
    - bootstrap

############################################# DEBUGGING

- include: collectd.yml
